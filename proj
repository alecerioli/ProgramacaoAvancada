#include "cutbox.h"


CutBox::CutBox(int x0, int x1, int y0, int y1, int z0, int z1)
{
    this->x0=x0;
    this->x1=x1;
    this->y0=y0;
    this->y1=y1;
    this->z0=z0;
    this->z1=z1;
}

void CutBox::draw(Sculptor &t){
    for(int i=x0;i<=x1;i++){
        for(int j=y0;j<=y1;j++){
            for(int k=z0;k<=z1;k++){
                t.cutVoxel(i,j,k);
            }
        }
    }
}




#include "cutellipsoid.h"
#include <cmath>


CutEllipsoid::CutEllipsoid(int xcenter, int ycenter, int zcenter, int rx, int ry, int rz)
{
    this->xcenter=xcenter;
    this->ycenter=ycenter;
    this->zcenter=zcenter;
    this->rx=rx;
    this->ry=ry;
    this->rz=rz;
}

void CutEllipsoid::draw(Sculptor &t){
    for(int i=xcenter-rx; i<=xcenter+rx; i++){
        for (int j=ycenter-ry; j<=ycenter+ry; j++) {
            for (int k=zcenter-rz; k<=zcenter+rz; k++){
                double dist = pow(i-xcenter,2)/pow(rx,2) + pow(j-ycenter,2)/pow(ry,2) + pow(k-zcenter,2)/pow(rz,2);
                if (dist <= 1){
                    t.cutVoxel(i,j,k);
                }
            }
        }
    }
}






#include "cutsphere.h"
#include <cmath>


CutSphere::CutSphere(int xcenter, int ycenter, int zcenter, int radius)
{
    this->xcenter=xcenter;
    this->ycenter=ycenter;
    this->zcenter=zcenter;
    this->radius=radius;
}

void CutSphere::draw(Sculptor &t){
    for(int i=xcenter-radius; i<=xcenter+radius; i++){
        for (int j=ycenter-radius; j<=ycenter+radius; j++) {
            for (int k=zcenter-radius; k<=zcenter+radius; k++){
                double dist = pow(i-xcenter,2) + pow(j-ycenter,2) + pow(k-zcenter,2);
                if(dist<=pow(radius,2)){
                    t.cutVoxel(i,j,k);
                }
            }
        }

    }
}


#include "cutvoxel.h"

CutVoxel::CutVoxel(int x, int y, int z)
{
    this->x=x;
    this->y=y;
    this->z=z;
}

void CutVoxel::draw(Sculptor &t){
    t.cutVoxel(x,y,z);
}



#include "cutsphere.h"
#include "cutvoxel.h"
#include "putvoxel.h"
#include "putsphere.h"
#include "putbox.h"
#include "putellipsoid.h"
#include "sculptor.h"
#include <vector>
#include <string>

using namespace std;

int main(){
    Sculptor t(100,100,100);
    vector <FiguraGeometrica*> f;
    f.push_back(new PutSphere(80,81,80,5,1,1,1,1));
    f.push_back(new PutBox(0,20,0,13,0,18,1,0,0,1));
    f.push_back(new PutEllipsoid(60,60,60,8,9,15,1,1,0,0));
    f.push_back(new PutVoxel(43,42,45,1,1,1,0));
   /* f.push_back(new CutVoxel(43,42,45));
    f.push_back(new CutEllipsoid(60,60,60,8,9,15));
    f.push_back(new CutBox(0,20,0,13,0,18));
    f.push_back(new CutSphere(80,81,80,5));*/

    for (int i=0; i<f.size(); i++) {
        f[i]->draw(t);
        delete f[i];
    }
    t.writeOFF("C:/Users/User/Documents/saida.off");
    return 0;
}




#include "putbox.h"
#include <iostream>

using namespace std;


PutBox::PutBox(int x0, int x1, int y0, int y1, int z0, int z1, float r, float g, float b, float a)
{
    this->x0=x0;
    this->x1=x1;
    this->y0=y0;
    this->y1=y1;
    this->z0=z0;
    this->z1=z1;
    this->r=r;
    this->g=g;
    this->b=b;
    this->a=a;
}


void PutBox::draw(Sculptor &t){
    t.setColor(r,g,b,a);
    for(int i=x0;i<=x1;i++){
        for(int j=y0;j<=y1;j++){
            for(int k=z0;k<=z1;k++){
                t.putVoxel(i,j,k);
            }
        }
    }
}




#include "putellipsoid.h"
#include <iostream>
#include <cmath>

using namespace std;

PutEllipsoid::PutEllipsoid(int xcenter, int ycenter, int zcenter, int rx, int ry, int rz, float r, float g, float b, float a){
    this->xcenter=xcenter;
    this->ycenter=ycenter;
    this->zcenter=zcenter;
    this->rx=rx;
    this->ry=ry;
    this->rz=rz;
    this->r=r;
    this->g=g;
    this->b=b;
    this->a=a;
}

void PutEllipsoid::draw(Sculptor &t){
    t.setColor(r,g,b,a);
    for(int i=xcenter-rx; i<=xcenter+rx; i++){
        for (int j=ycenter-ry; j<=ycenter+ry; j++) {
            for (int k=zcenter-rz; k<=zcenter+rz; k++){
                double dist = pow(i-xcenter,2)/pow(rx,2) + pow(j-ycenter,2)/pow(ry,2) + pow(k-zcenter,2)/pow(rz,2);
                if (dist <= 1){
                    t.putVoxel(i,j,k);
                }
            }
        }
    }
}




#include "putsphere.h"
#include <iostream>
#include <cmath>

using namespace std;


PutSphere::PutSphere(int xcenter, int ycenter, int zcenter, int radius, float r, float g, float b, float a)
{
    this->xcenter=xcenter;
    this->ycenter=ycenter;
    this->zcenter=zcenter;
    this->radius=radius;
    this->r=r;
    this->g=g;
    this->b=b;
    this->a=a;
}

void PutSphere::draw(Sculptor &t){
    t.setColor(r,g,b,a);
    for(int i=xcenter-radius; i<=xcenter+radius; i++){
        for (int j=ycenter-radius; j<=ycenter+radius; j++) {
            for (int k=zcenter-radius; k<=zcenter+radius; k++){
                double dist = pow(i-xcenter,2) + pow(j-ycenter,2) + pow(k-zcenter,2);
                if(dist<=pow(radius,2)){
                    t.putVoxel(i,j,k);
                }
            }
        }
    }
}




#include "putvoxel.h"
#include <iostream>

using namespace std;

PutVoxel::PutVoxel(int x, int y, int z, float r, float g, float b, float a)
{
    this->x=x;
    this->y=y;
    this->z=z;
    this->r=r;
    this->g=g;
    this->b=b;
    this->a=a;
}

void PutVoxel::draw(Sculptor &t){
    t.setColor(r,g,b,a);
    t.putVoxel(x,y,z);
}
